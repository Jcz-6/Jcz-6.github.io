---
layout: post
title:  "Blog Week Four"
date:   2024-01-29 10:10:02 +0000
categories: blog posts
---
Welcome to our fourth blog entry for the development of Saving Animals by Josh and Jakub.

`Jakub`

During the fourth week, we continued working on the backend API and our frontend, I quickly realised that the frontend should also be in its own Docker container so I made one just for it, again on the same network running on localhost:XXXX. This turned out to be simpler than the setup for our API and Database but I ran into a huge issue because of Vite. Since we are using Vite as our build tool the whole app is started up by the Vite modules which are in the `Node Modules` of our app. Long story short whenever we started the container we got an error saying Vite not found. To fix this issue I spent a significant amount of time digging through the internet, and eventually, I stumbled upon a solution. Since Vite is in our node modules we need to track them with a volume inside our container by adding `- /app/node_modules` /app being our frontend container root directory.

Once that was set up we started working on the User Authentication for our project. I found out that having authentication on the backend is a lot more effective than just on the frontend so I looked into `Django Authentication`.
There are two main solutions, session authentication and token authentication both are effective. We decided on session authentication as it's more complex and we have touched on token authentication before so learning a new thing is always great. It started great as Django has loads of ways of incorporating Session Auth with cookies, the most versatile being decorators which dispatch a CSRF token into cookies, this happens on login and register. From now on unless specified a user needs to have a CSRF token to make API calls to our backend.

Sadly the great progress was halted rather abruptly when we came to test it on our React frontend. The cookie wasn't setting due to CORS issues even though both containers ran on `localhost` just a different port. This is where Docker became our enemy for a couple of days. After looking at every single post I could find on this issue and trying all the fixes I figured that Docker could be the issue, even though both containers run on localhost on my machine they have different ip's inside the containers.

After this revelation, I dove into why that is an issue for Django and it turns out HTTP cookies cannot be sent Cross Origin only HTTPS secure cookies can but since we don't have an SSL cert or a domain this kills the cookie authentication. Which left us scratching our heads at the end of this week.

